'use strict';

const btn = document.querySelector('.btn-country');
const countriesContainer = document.querySelector('.countries');
const mainCountryContainer = document.querySelector(
  '.main__country--container'
);

//–≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
const displayError = function (message) {
  countriesContainer.insertAdjacentText('beforeend', message);
  if (countriesContainer.style.opacity !== 1) {
    countriesContainer.style.opacity = 1;
  }
};

//–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
const displayCountry = function (data, className = '') {
  const currencyName = Object.values(data.currencies)[0].name;
  const currencySymbol = Object.values(data.currencies)[0].symbol;
  const language = Object.values(data.languages)[0];
  const isMainCountry = className == '' ? 'main__country' : '';
  const html = `
  <article class="country ${className} 
  ${isMainCountry}">
  <img class="country__img" src="${data.flags.svg}" />
  <div class="country__data">
    <h3 class="country__name">${data.name.common}</h3>
    <h4 class="country__region">${data.region}</h4>
    <p class="country__row"><span>üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>${
      (+data.population / 1000000).toFixed(1) + '–º–ª–Ω'
    }</p>
    <p class="country__row"><span>üó£Ô∏è</span>${language}</p>
    <p class="country__row"><span>üí∞</span>${currencyName} ${currencySymbol}</p>
  </div>
  </article>
  `;
  if (className == '') {
    mainCountryContainer.insertAdjacentHTML('beforeend', html);
  } else countriesContainer.insertAdjacentHTML('beforeend', html);
  if (countriesContainer.style.opacity !== 1) {
    countriesContainer.style.opacity = 1;
  }
};

//–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–µ—Ç—á –∏ –∫–æ–Ω–≤–µ—Ä—Ç json
const getDataAndConvertJSON = function (url, message) {
  return fetch(url).then(response => {
    if (response.status === 400)
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –û—à–∏–±–∫–∞ ${response.status}`);
    if (!response.ok)
      //—Å–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—Ä—É—á–Ω—É—é. –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å—Ä–∞–∑—É –∂–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –∏
      //–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ –≤ catch
      throw new Error(`${message}. –û—à–∏–±–∫–∞ ${response.status}.`);
    return response.json();
  });
};

//–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏
let isDisplayed = false;

//–≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
const displayUserCountry = async function () {
  try {
    const userPos = await new Promise(function (resolve, reject) {
      navigator.geolocation.getCurrentPosition(resolve, reject);
    });

    const { latitude: lat, longitude: lng } = userPos.coords;

    const geocodingResponse = await getDataAndConvertJSON(
      `https://geocode.maps.co/reverse?lat=${lat}&lon=${lng}`,
      '–ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!'
    );

    const userCountryName = geocodingResponse.display_name
      .split(',')
      [geocodingResponse.display_name.split(',').length - 1].trim();

    const userCountryInfo = await fetch(
      `https://restcountries.com/v3.1/name/${userCountryName}`
    )
      .then(data => data.json())
      .then(data => data[0]);

    displayCountry(userCountryInfo);

    const borderCountries = userCountryInfo.borders;

    const borderCountriesRequest = await borderCountries.map(async function (
      country
    ) {
      const countryInfo = await getDataAndConvertJSON(
        `https://restcountries.com/v3.1/alpha/${country}`,
        '–°–æ—Å–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :('
      );
      return countryInfo;
    });

    const borderCountriesResponse = await Promise.all(borderCountriesRequest);

    const borderCountriesInfo = borderCountriesResponse.map(
      borderCountry => borderCountry[0]
    );

    borderCountriesInfo.forEach(country =>
      displayCountry(country, 'neighbour')
    );

    btn.classList.remove('btn-center');

    isDisplayed = !isDisplayed;

    if (isDisplayed) {
      btn.textContent = '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –≤—Å–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ –Ω–æ–≤–æ–π!';
    } else {
      btn.classList.add('btn-center');
      removeContent();
      btn.textContent =
        '–ì–¥–µ –Ø? (–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≤–∫–ª—é—á–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ)';
    }
  } catch (e) {
    console.error(e);
    displayError(e.message);
  }
};

//—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const removeContent = function () {
  const elements = Array.from(countriesContainer.childNodes);
  elements.forEach(function (item) {
    if (item) {
      if (
        item.classList &&
        item.classList.contains('main__country--container')
      ) {
        item.innerHTML = '';
        return;
      }
      countriesContainer.removeChild(item);
    }
  });
};

//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
btn.addEventListener('click', function () {
  displayUserCountry();
});
